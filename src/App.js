import React, {useState} from 'react';
import {useQuery, useMutation } from "@apollo/client";
import './App.css';
import * as GQL from './GraphQL/GQL.js'

import Messages from './components/messages.js';
import WhoToFollow from './components/setfollowers.js';
import InputBar from './components/inputbar.js';

function App({client}) {
  //React and Apollo Hooks
  const allMicros = useQuery(GQL.GET_ALL_MICROS, {pollInterval: 5000});
  const allUsers = useQuery(GQL.GET_ALL_USERS, {pollInterval: 10000});
  
  const [addUserToDB] = useMutation (GQL.ADD_USER, {onCompleted(dataReturned) {
    console.log(`New ID generated: ${dataReturned.createUser._id}`)
    setMyID(dataReturned.createUser._id)}});
  const [updateFollowersToDB] = useMutation (GQL.UPDATE_FOLLOWERS);
  const [addMicroBlogToDB] = useMutation (GQL.BLOG);


  const [followList, setFollowList] = useState([]);
  const [currentUser, setCurrentUser] = useState("Guest");
  const [myID, setMyID] = useState("266245839750431232"); //Default ID is for Guest

  const addUserToFollow = (id) => {
    let newFollowList = []
    if(followList.includes(id)){
      newFollowList = followList.filter((userID) => userID !== id)
    } else {
      newFollowList = followList.concat(id)
    }
    setFollowList(newFollowList)
    updateFollowersToDB({variables: { id: myID, following: newFollowList}})
  };

  const blog = (text) => {
    console.log(`${currentUser}: ${text}`) //placeholder for sending blog
    addMicroBlogToDB({variables: { author: myID, text: text, timestamp: "2020-05-20T22:14:56.000Z" }})
  }

  const handleUserChange = (newUser) => {
    setCurrentUser(newUser);
    let newUserIDinAllUsers = -1
    allUsers.data.allUsers.data.forEach((user, index) => { //Looks to see if user name already exists or not sets var to -1 or index
      if(user.nickName === newUser){newUserIDinAllUsers = index}
    });

    if(newUserIDinAllUsers === -1){ 
      //add user to DB if user doesn't exist, will also set myID to new ID generated by server.
      addUserToDB({variables: { nickName: newUser }});
      //New user set to follow no-one
      setFollowList([])
    } else {
      //If already a user, then change myID to new person's ID and change followList to new users follow list
      setMyID(allUsers.data.allUsers.data[newUserIDinAllUsers]._id)
      setFollowList(allUsers.data.allUsers.data[newUserIDinAllUsers].following)
    }
  }

  return (
    <div className="App" key={myID}>
      <header className="App-header">
        Welcome to my micro blogging platform
      </header>
      You are logged in as: <InputBar placeholder={currentUser} returnedVal = {(text)=> handleUserChange(text)} />
      <Messages micros={allMicros.data} loading={allMicros.loading} error={allMicros.error} follow={followList} />
      <InputBar placeholder={"Blog this..."} returnedVal = {(text)=> blog(text)} />
      <WhoToFollow users={allUsers} follow={followList} setFollower = {addUserToFollow} currentUser={currentUser} />
    </div>
  );
}

export default App;